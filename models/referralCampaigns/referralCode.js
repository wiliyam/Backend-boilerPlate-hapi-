"use strict";
const joi = require("joi");
const db = require("../../library/mongodb");
const moment = require("moment");
const tableName = "referralCodes";
const ObjectID = require("mongodb").ObjectID;

/**
 * @function
 * @name insert a new offer
 * @param {object} params - data coming from controller
 */
const postReferralCode = async refferalData => {
  const result = await db
    .get()
    .collection(tableName)
    .insert(refferalData);
  return result;
};

const getDetailsByCode = async referralCode => {
  const res = await db
    .get()
    .collection(tableName)
    .find({
      referralCode: referralCode
    })
    .toArray((err, result) => {
      return result;
    });
};

const updateReferals = async referralCode => {
  const result = await db
    .get()
    .collection(tableName)
    .findOneAndUpdate(
      {
        _id: new ObjectID(referralCode.id)
      },
      {
        $push: {
          referrals: {
            userId: referralCode.userId,
            registeredOn: referralCode.registeredOn,
            userType: referralCode.userType,
            firstname: referralCode.firstname,
            lastName: referralCode.lastName,
            email: referralCode.email,
            countryCode: referralCode.countryCode,
            phoneNumber: referralCode.phoneNumber
          }
        },

        $inc: {
          totalRefers: 1
        }
      },
      {
        returnOriginal: false
      }
    );
  return result;
};

const getReferralCodeByUserId = async userId => {
  const result = await db
    .get()
    .collection(tableName)
    .findOne({
      userId: userId
    });
  return result;
};

/*
@ Update referral code data with with campaignId for new user
 */
const updateCampaignIdWithNewUser = async data => {
  const result = await db
    .get()
    .collection(tableName)
    .findOneAndUpdate(
      {
        userId: data.userId
      },
      {
        $set: {
          campaignId: data.campaignId,
          referrerName: data.referrerName,
          referrerId: data.referrerId
        }
      },
      {
        returnOriginal: false
      }
    );

  return result;
};

/*
@function to update referrer data with campaign id inside user referrer data
 */
const updateCampaignIdWithReferrerData = async data => {
  const result = await db
    .get()
    .collection(tableName)
    .update(
      {
        userId: data.referrerId,
        "referrals.userId": data.newUserId
      },
      {
        $set: {
          "referrals.$.campaignId": data.campaignId
        }
      }
    );
  return result;
};

/*Get referrals codes generated under campaign */

const getReferalsByCampaignId = async requestData => {
  const res = await db
    .get()
    .collection(tableName)
    .find({
      campaignId: requestData.campaignId
    })
    .skip(requestData.offset)
    .limit(requestData.limit)
    .sort({
      _id: -1
    })
    .toArray((err, result) => {
      return result;
    });
};

/*
Get total referral codes generated by referral campaign id 
 */
const getCodesGeratedCountByID = async campaignId => {
  const result = await db
    .get()
    .collection(tableName)
    .count({
      campaignId: campaignId
    });

  return result;
};

/*
Increase total refers to 1 
 */

const increaseReferralCountByUserId = async userId => {
  const result = await db
    .get()
    .collection(tableName)
    .update(
      {
        userId: userId
      },
      {
        $inc: {
          totalRefers: 1
        }
      }
    );
  return result;
};

const getReferrerDetailsByNewUserId = async userId => {
  const result = await db
    .get()
    .collection(tableName)
    .findOne({
      "referrals.userId": userId
    });

  return resultS;
};

const getTotalReferralsDataByCampaignId = async data => {
  const res = await db
    .get()
    .collection(tableName)
    .find(
      {
        userId: data.userId,
        "referrals.campaignId": data.referralCampaignId
      },
      {
        "referrals.$": 1,
        userId: 1
      }
    )
    .skip(data.offset)
    .limit(data.limit)
    .sort({
      _id: -1
    })
    .toArray((err, result) => {
      return result;
    });
};

const getTotalReferralsCountByCampaignId = async data => {
  const result = await db
    .get()
    .collection(tableName)
    .count(
      {
        userId: data.userId,
        "referrals.campaignId": data.campaignId
      },
      {
        "referrals.$": 1,
        userId: 1
      }
    );

  return result;
};

module.exports = {
  postReferralCode,
  getDetailsByCode,
  updateReferals,
  getReferralCodeByUserId,
  updateCampaignIdWithNewUser,
  updateCampaignIdWithReferrerData,
  getReferalsByCampaignId,
  getCodesGeratedCountByID,
  increaseReferralCountByUserId,
  getReferrerDetailsByNewUserId,
  getTotalReferralsDataByCampaignId,
  getTotalReferralsCountByCampaignId
};
